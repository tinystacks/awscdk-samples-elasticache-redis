"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcPeeringRoutes = void 0;
const iac_utils_1 = require("@tinystacks/iac-utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const constructs_1 = require("constructs");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class VpcPeeringRoutes extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { accountId, region } = props;
        const role = new aws_iam_1.Role(this, (0, iac_utils_1.constructId)(id, 'role'), {
            assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
            inlinePolicies: {
                functionPolicy: new aws_iam_1.PolicyDocument({
                    statements: [
                        new aws_iam_1.PolicyStatement({
                            actions: [
                                'ec2:DescribeRouteTables'
                            ],
                            resources: ['*']
                        }),
                        new aws_iam_1.PolicyStatement({
                            actions: [
                                'ec2:CreateRoute',
                                'ec2:DeleteRoute'
                            ],
                            resources: [`arn:aws:ec2:${region}:${accountId}:route-table/*`]
                        })
                    ]
                })
            },
            managedPolicies: [
                {
                    managedPolicyArn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
                }
            ]
        });
        const fn = new aws_lambda_1.Function(this, (0, iac_utils_1.constructId)(id, 'lambdaFunction'), {
            code: new aws_lambda_1.InlineCode(fs_1.default.readFileSync(path_1.default.resolve(__dirname, './lambda.js'), { encoding: 'utf-8' })),
            handler: 'index.handler',
            timeout: aws_cdk_lib_1.Duration.seconds(300),
            runtime: aws_lambda_1.Runtime.NODEJS_16_X,
            role,
            logRetention: aws_logs_1.RetentionDays.THREE_MONTHS
        });
        const provider = new custom_resources_1.Provider(this, 'Provider', {
            onEventHandler: fn
        });
        const resource = new aws_cdk_lib_1.CustomResource(this, 'Resource', {
            serviceToken: provider.serviceToken,
            properties: props
        });
        this.response = resource.getAtt('Response').toString();
    }
}
exports.VpcPeeringRoutes = VpcPeeringRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29uc3RydWN0cy9uZXR3b3JraW5nL3ZwYy1wZWVyaW5nLXJvdXRlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBb0Q7QUFDcEQsNkNBQXVEO0FBQ3ZELGlEQUE4RjtBQUM5Rix1REFBdUU7QUFDdkUsbURBQXFEO0FBQ3JELG1FQUF3RDtBQUN4RCwyQ0FBdUM7QUFDdkMsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQVd4QixNQUFhLGdCQUFpQixTQUFRLHNCQUFTO0lBRTdDLFlBQWEsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNEI7UUFDckUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLEVBQ0osU0FBUyxFQUNULE1BQU0sRUFDUCxHQUFHLEtBQUssQ0FBQztRQUVWLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxDQUFDLElBQUksRUFBRSxJQUFBLHVCQUFXLEVBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25ELFNBQVMsRUFBRSxJQUFJLDBCQUFnQixDQUFDLHNCQUFzQixDQUFDO1lBQ3ZELGNBQWMsRUFBRTtnQkFDZCxjQUFjLEVBQUUsSUFBSSx3QkFBYyxDQUFDO29CQUNqQyxVQUFVLEVBQUU7d0JBQ1YsSUFBSSx5QkFBZSxDQUFDOzRCQUNsQixPQUFPLEVBQUU7Z0NBQ1AseUJBQXlCOzZCQUMxQjs0QkFDRCxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7eUJBQ2pCLENBQUM7d0JBQ0YsSUFBSSx5QkFBZSxDQUFDOzRCQUNsQixPQUFPLEVBQUU7Z0NBQ1AsaUJBQWlCO2dDQUNqQixpQkFBaUI7NkJBQ2xCOzRCQUNELFNBQVMsRUFBRSxDQUFDLGVBQWUsTUFBTSxJQUFJLFNBQVMsZ0JBQWdCLENBQUM7eUJBQ2hFLENBQUM7cUJBQ0g7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsZUFBZSxFQUFFO2dCQUNmO29CQUNFLGdCQUFnQixFQUFFLGtFQUFrRTtpQkFDckY7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxHQUFHLElBQUkscUJBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBQSx1QkFBVyxFQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1lBQy9ELElBQUksRUFBRSxJQUFJLHVCQUFVLENBQ2xCLFlBQUUsQ0FBQyxZQUFZLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDL0U7WUFDRCxPQUFPLEVBQUUsZUFBZTtZQUN4QixPQUFPLEVBQUUsc0JBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzlCLE9BQU8sRUFBRSxvQkFBTyxDQUFDLFdBQVc7WUFDNUIsSUFBSTtZQUNKLFlBQVksRUFBRSx3QkFBYSxDQUFDLFlBQVk7U0FDekMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSwyQkFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDOUMsY0FBYyxFQUFFLEVBQUU7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSw0QkFBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDcEQsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO1lBQ25DLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUEzREQsNENBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RydWN0SWQgfSBmcm9tICdAdGlueXN0YWNrcy9pYWMtdXRpbHMnO1xuaW1wb3J0IHsgQ3VzdG9tUmVzb3VyY2UsIER1cmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgUG9saWN5RG9jdW1lbnQsIFBvbGljeVN0YXRlbWVudCwgUm9sZSwgU2VydmljZVByaW5jaXBhbCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgSW5saW5lQ29kZSwgUnVudGltZSwgRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IFJldGVudGlvbkRheXMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbG9ncyc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ2F3cy1jZGstbGliL2N1c3RvbS1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmludGVyZmFjZSBWcGNQZWVyaW5nUm91dGVzUHJvcHMge1xuICB2cGNJZDogc3RyaW5nXG4gIHBlZXJpbmdDb25uZWN0aW9uSWQ6IHN0cmluZ1xuICBkZXN0aW5hdGlvbkNpZHJCbG9jazogc3RyaW5nXG4gIGFjY291bnRJZDogc3RyaW5nXG4gIHJlZ2lvbjogc3RyaW5nXG4gIHVuaXF1ZUlkOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIFZwY1BlZXJpbmdSb3V0ZXMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzcG9uc2U6IGFueTtcbiAgY29uc3RydWN0b3IgKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWcGNQZWVyaW5nUm91dGVzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qge1xuICAgICAgYWNjb3VudElkLFxuICAgICAgcmVnaW9uXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3Qgcm9sZSA9IG5ldyBSb2xlKHRoaXMsIGNvbnN0cnVjdElkKGlkLCAncm9sZScpLCB7XG4gICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdsYW1iZGEuYW1hem9uYXdzLmNvbScpLFxuICAgICAgaW5saW5lUG9saWNpZXM6IHtcbiAgICAgICAgZnVuY3Rpb25Qb2xpY3k6IG5ldyBQb2xpY3lEb2N1bWVudCh7XG4gICAgICAgICAgc3RhdGVtZW50czogW1xuICAgICAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAnZWMyOkRlc2NyaWJlUm91dGVUYWJsZXMnXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHJlc291cmNlczogWycqJ11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAnZWMyOkNyZWF0ZVJvdXRlJyxcbiAgICAgICAgICAgICAgICAnZWMyOkRlbGV0ZVJvdXRlJ1xuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICByZXNvdXJjZXM6IFtgYXJuOmF3czplYzI6JHtyZWdpb259OiR7YWNjb3VudElkfTpyb3V0ZS10YWJsZS8qYF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG1hbmFnZWRQb2xpY2llczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWFuYWdlZFBvbGljeUFybjogJ2Fybjphd3M6aWFtOjphd3M6cG9saWN5L3NlcnZpY2Utcm9sZS9BV1NMYW1iZGFCYXNpY0V4ZWN1dGlvblJvbGUnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcbiAgICBjb25zdCBmbiA9IG5ldyBGdW5jdGlvbih0aGlzLCBjb25zdHJ1Y3RJZChpZCwgJ2xhbWJkYUZ1bmN0aW9uJyksIHtcbiAgICAgIGNvZGU6IG5ldyBJbmxpbmVDb2RlKFxuICAgICAgICBmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vbGFtYmRhLmpzJyksIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSlcbiAgICAgICksXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDMwMCksXG4gICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNl9YLFxuICAgICAgcm9sZSxcbiAgICAgIGxvZ1JldGVudGlvbjogUmV0ZW50aW9uRGF5cy5USFJFRV9NT05USFNcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFByb3ZpZGVyKHRoaXMsICdQcm92aWRlcicsIHtcbiAgICAgIG9uRXZlbnRIYW5kbGVyOiBmblxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgQ3VzdG9tUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgc2VydmljZVRva2VuOiBwcm92aWRlci5zZXJ2aWNlVG9rZW4sXG4gICAgICBwcm9wZXJ0aWVzOiBwcm9wc1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc291cmNlLmdldEF0dCgnUmVzcG9uc2UnKS50b1N0cmluZygpO1xuICB9XG59Il19