import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { Construct } from 'constructs';
interface ExternalVpcPeer {
    vpcId: string;
    cidrBlock: string;
    accountId?: string;
    region?: string;
}
export interface VpcProps {
    cidrBlock?: string;
    internetAccess: boolean;
    internalPeers?: VPC[];
    externalPeers?: ExternalVpcPeer[];
}
export declare class VPC extends Construct {
    private readonly _vpc;
    private readonly subnetConfiguration;
    private readonly _cidrBlock;
    private readonly cidrBlockMask;
    private readonly subnetMask;
    private readonly internetAccess;
    private readonly accountId;
    private readonly region;
    constructor(scope: Construct, id: string, props: VpcProps);
    requestPeeringConnection(peer: VPC, connectionId: string): ec2.CfnVPCPeeringConnection;
    acceptPeeringConnection(requester: VPC, peeringConnectionId: string, connectionId: string): void;
    requestExternalPeeringConnection(peer: ExternalVpcPeer, connectionId: string): ec2.CfnVPCPeeringConnection;
    acceptExternalPeeringConnection(peer: ExternalVpcPeer, peeringConnectionId: string, connectionId: string): void;
    addPeeringRoutes(peeringConnectionId: string, destinationCidrBlock: string, connectionId: string): void;
    get vpc(): ec2.IVpc;
    get cidrBlock(): string;
}
export {};
