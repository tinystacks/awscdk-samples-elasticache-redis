"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcPeerDnsResolution = void 0;
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
class VpcPeerDnsResolution extends custom_resources_1.AwsCustomResource {
    constructor(scope, id, props) {
        const { peeringConnectionId, vpcArn, accountId, region, isRequester, isAccepter } = props;
        const enableDnsResolution = {
            service: 'EC2',
            action: 'modifyVpcPeeringConnectionOptions',
            parameters: {
                VpcPeeringConnectionId: peeringConnectionId
            },
            physicalResourceId: custom_resources_1.PhysicalResourceId.of(id)
        };
        const disableDnsResolution = {
            service: 'EC2',
            action: 'modifyVpcPeeringConnectionOptions',
            parameters: {
                VpcPeeringConnectionId: peeringConnectionId
            }
        };
        if (isRequester) {
            enableDnsResolution.parameters.RequesterPeeringConnectionOptions = {
                AllowDnsResolutionFromRemoteVpc: true
            };
            disableDnsResolution.parameters.RequesterPeeringConnectionOptions = {
                AllowDnsResolutionFromRemoteVpc: false
            };
        }
        if (isAccepter) {
            enableDnsResolution.parameters.AccepterPeeringConnectionOptions = {
                AllowDnsResolutionFromRemoteVpc: true
            };
            disableDnsResolution.parameters.AccepterPeeringConnectionOptions = {
                AllowDnsResolutionFromRemoteVpc: false
            };
        }
        const policy = custom_resources_1.AwsCustomResourcePolicy.fromSdkCalls({
            resources: [
                vpcArn,
                `arn:aws:ec2:${region}:${accountId}:vpc-peering-connection/*`
            ]
        });
        super(scope, id, {
            onCreate: enableDnsResolution,
            onUpdate: enableDnsResolution,
            onDelete: disableDnsResolution,
            policy
        });
    }
}
exports.VpcPeerDnsResolution = VpcPeerDnsResolution;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXBlZXItZG5zLXJlc29sdXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uc3RydWN0cy9uZXR3b3JraW5nL3ZwYy1wZWVyLWRucy1yZXNvbHV0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1FQUEwSDtBQVkxSCxNQUFhLG9CQUFxQixTQUFRLG9DQUFpQjtJQUN6RCxZQUFhLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWdDO1FBQ3pFLE1BQU0sRUFDSixtQkFBbUIsRUFDbkIsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sV0FBVyxFQUNYLFVBQVUsRUFDWCxHQUFHLEtBQUssQ0FBQztRQUVWLE1BQU0sbUJBQW1CLEdBQWU7WUFDdEMsT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsbUNBQW1DO1lBQzNDLFVBQVUsRUFBRTtnQkFDVixzQkFBc0IsRUFBRSxtQkFBbUI7YUFDNUM7WUFDRCxrQkFBa0IsRUFBRSxxQ0FBa0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzlDLENBQUM7UUFFRixNQUFNLG9CQUFvQixHQUFlO1lBQ3ZDLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFLG1DQUFtQztZQUMzQyxVQUFVLEVBQUU7Z0JBQ1Ysc0JBQXNCLEVBQUUsbUJBQW1CO2FBQzVDO1NBQ0YsQ0FBQztRQUVGLElBQUksV0FBVyxFQUFFO1lBQ2YsbUJBQW1CLENBQUMsVUFBVSxDQUFDLGlDQUFpQyxHQUFHO2dCQUNqRSwrQkFBK0IsRUFBRSxJQUFJO2FBQ3RDLENBQUM7WUFDRixvQkFBb0IsQ0FBQyxVQUFVLENBQUMsaUNBQWlDLEdBQUc7Z0JBQ2xFLCtCQUErQixFQUFFLEtBQUs7YUFDdkMsQ0FBQztTQUNIO1FBRUQsSUFBSSxVQUFVLEVBQUU7WUFDZCxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsZ0NBQWdDLEdBQUc7Z0JBQ2hFLCtCQUErQixFQUFFLElBQUk7YUFDdEMsQ0FBQztZQUNGLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxnQ0FBZ0MsR0FBRztnQkFDakUsK0JBQStCLEVBQUUsS0FBSzthQUN2QyxDQUFDO1NBQ0g7UUFFRCxNQUFNLE1BQU0sR0FBRywwQ0FBdUIsQ0FBQyxZQUFZLENBQUM7WUFDbEQsU0FBUyxFQUFFO2dCQUNULE1BQU07Z0JBQ04sZUFBZSxNQUFNLElBQUksU0FBUywyQkFBMkI7YUFDOUQ7U0FDRixDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixRQUFRLEVBQUUsb0JBQW9CO1lBQzlCLE1BQU07U0FDUCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUE1REQsb0RBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXdzQ3VzdG9tUmVzb3VyY2UsIEF3c0N1c3RvbVJlc291cmNlUG9saWN5LCBBd3NTZGtDYWxsLCBQaHlzaWNhbFJlc291cmNlSWQgfSBmcm9tICdhd3MtY2RrLWxpYi9jdXN0b20tcmVzb3VyY2VzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZwY1BlZXJEbnNSZXNvbHV0aW9uUHJvcHMge1xuICBwZWVyaW5nQ29ubmVjdGlvbklkOiBzdHJpbmdcbiAgdnBjQXJuOiBzdHJpbmdcbiAgYWNjb3VudElkOiBzdHJpbmdcbiAgcmVnaW9uOiBzdHJpbmdcbiAgaXNSZXF1ZXN0ZXI/OiBib29sZWFuXG4gIGlzQWNjZXB0ZXI/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBWcGNQZWVyRG5zUmVzb2x1dGlvbiBleHRlbmRzIEF3c0N1c3RvbVJlc291cmNlIHtcbiAgY29uc3RydWN0b3IgKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWcGNQZWVyRG5zUmVzb2x1dGlvblByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgcGVlcmluZ0Nvbm5lY3Rpb25JZCxcbiAgICAgIHZwY0FybixcbiAgICAgIGFjY291bnRJZCxcbiAgICAgIHJlZ2lvbixcbiAgICAgIGlzUmVxdWVzdGVyLFxuICAgICAgaXNBY2NlcHRlclxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGVuYWJsZURuc1Jlc29sdXRpb246IEF3c1Nka0NhbGwgPSB7XG4gICAgICBzZXJ2aWNlOiAnRUMyJyxcbiAgICAgIGFjdGlvbjogJ21vZGlmeVZwY1BlZXJpbmdDb25uZWN0aW9uT3B0aW9ucycsXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIFZwY1BlZXJpbmdDb25uZWN0aW9uSWQ6IHBlZXJpbmdDb25uZWN0aW9uSWRcbiAgICAgIH0sXG4gICAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5vZihpZClcbiAgICB9O1xuXG4gICAgY29uc3QgZGlzYWJsZURuc1Jlc29sdXRpb246IEF3c1Nka0NhbGwgPSB7XG4gICAgICBzZXJ2aWNlOiAnRUMyJyxcbiAgICAgIGFjdGlvbjogJ21vZGlmeVZwY1BlZXJpbmdDb25uZWN0aW9uT3B0aW9ucycsXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIFZwY1BlZXJpbmdDb25uZWN0aW9uSWQ6IHBlZXJpbmdDb25uZWN0aW9uSWRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGlzUmVxdWVzdGVyKSB7XG4gICAgICBlbmFibGVEbnNSZXNvbHV0aW9uLnBhcmFtZXRlcnMuUmVxdWVzdGVyUGVlcmluZ0Nvbm5lY3Rpb25PcHRpb25zID0ge1xuICAgICAgICBBbGxvd0Ruc1Jlc29sdXRpb25Gcm9tUmVtb3RlVnBjOiB0cnVlXG4gICAgICB9O1xuICAgICAgZGlzYWJsZURuc1Jlc29sdXRpb24ucGFyYW1ldGVycy5SZXF1ZXN0ZXJQZWVyaW5nQ29ubmVjdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgIEFsbG93RG5zUmVzb2x1dGlvbkZyb21SZW1vdGVWcGM6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0FjY2VwdGVyKSB7XG4gICAgICBlbmFibGVEbnNSZXNvbHV0aW9uLnBhcmFtZXRlcnMuQWNjZXB0ZXJQZWVyaW5nQ29ubmVjdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgIEFsbG93RG5zUmVzb2x1dGlvbkZyb21SZW1vdGVWcGM6IHRydWVcbiAgICAgIH07XG4gICAgICBkaXNhYmxlRG5zUmVzb2x1dGlvbi5wYXJhbWV0ZXJzLkFjY2VwdGVyUGVlcmluZ0Nvbm5lY3Rpb25PcHRpb25zID0ge1xuICAgICAgICBBbGxvd0Ruc1Jlc29sdXRpb25Gcm9tUmVtb3RlVnBjOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBwb2xpY3kgPSBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoe1xuICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgIHZwY0FybixcbiAgICAgICAgYGFybjphd3M6ZWMyOiR7cmVnaW9ufToke2FjY291bnRJZH06dnBjLXBlZXJpbmctY29ubmVjdGlvbi8qYFxuICAgICAgXVxuICAgIH0pO1xuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBvbkNyZWF0ZTogZW5hYmxlRG5zUmVzb2x1dGlvbixcbiAgICAgIG9uVXBkYXRlOiBlbmFibGVEbnNSZXNvbHV0aW9uLFxuICAgICAgb25EZWxldGU6IGRpc2FibGVEbnNSZXNvbHV0aW9uLFxuICAgICAgcG9saWN5XG4gICAgfSk7XG4gIH1cbn0iXX0=