"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPC = void 0;
const iac_utils_1 = require("@tinystacks/iac-utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const constructs_1 = require("constructs");
const crypto_1 = require("crypto");
const vpc_peer_dns_resolution_1 = require("./vpc-peer-dns-resolution");
const vpc_peering_request_accepter_1 = require("./vpc-peering-request-accepter");
const vpc_peering_routes_1 = require("./vpc-peering-routes");
class VPC extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { cidrBlock, internetAccess, internalPeers, externalPeers } = props;
        this.internetAccess = internetAccess;
        this.accountId = aws_cdk_lib_1.Stack.of(this).account;
        this.region = aws_cdk_lib_1.Stack.of(this).region;
        if (cidrBlock) {
            this._cidrBlock = cidrBlock;
            this.cidrBlockMask = Number(cidrBlock?.split('/')?.at(1));
        }
        else {
            const autoAllocatedCidrBlock = (0, iac_utils_1.allocateCidrBlock)({ seed: id });
            this._cidrBlock = autoAllocatedCidrBlock.cidrBlock;
            this.cidrBlockMask = autoAllocatedCidrBlock.networkMask;
        }
        const stackAzs = aws_cdk_lib_1.Stack.of(this).availabilityZones;
        const azCount = stackAzs.length;
        const maxSubnetCount = azCount * 3; // Allow 1 subnet type in each availability zone
        this.subnetMask = (0, iac_utils_1.allocateSubnetMask)(this.cidrBlockMask, maxSubnetCount);
        this.subnetConfiguration = [];
        if (internetAccess) {
            const privateSubnetConfig = {
                cidrMask: this.subnetMask,
                name: 'PrivateSubnet',
                subnetType: ec2.SubnetType.PRIVATE_WITH_NAT
            };
            this.subnetConfiguration.push(privateSubnetConfig);
        }
        const publicSubnetConfig = {
            cidrMask: this.subnetMask,
            name: 'PublicSubnet',
            subnetType: ec2.SubnetType.PUBLIC
        };
        this.subnetConfiguration.push(publicSubnetConfig);
        const isolatedSubnetConfig = {
            cidrMask: this.subnetMask,
            name: 'IsolatedSubnet',
            subnetType: ec2.SubnetType.PRIVATE_ISOLATED
        };
        this.subnetConfiguration.push(isolatedSubnetConfig);
        this._vpc = new ec2.Vpc(this, (0, iac_utils_1.constructId)('vpc'), {
            cidr: this.cidrBlock,
            subnetConfiguration: this.subnetConfiguration
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('vpc', 'id'), {
            description: `${id}-vpc-id`,
            value: this.vpc.vpcId
        });
        if (internalPeers != null) {
            for (const internalPeer of internalPeers) {
                const connectionId = `${this.vpc.vpcId}-to-${internalPeer.vpc.vpcId}`;
                const peeringConnectionRequest = this.requestPeeringConnection(internalPeer, connectionId);
                const peeringConnectionId = peeringConnectionRequest.ref;
                internalPeer.acceptPeeringConnection(this, peeringConnectionId, connectionId);
            }
        }
        if (externalPeers != null) {
            for (const externalPeer of externalPeers) {
                const connectionId = `${this.vpc.vpcId}-to-${externalPeer.vpcId}`;
                const peeringConnectionRequest = this.requestExternalPeeringConnection(externalPeer, connectionId);
                const peeringConnectionId = peeringConnectionRequest.ref;
                this.acceptExternalPeeringConnection(externalPeer, peeringConnectionId, connectionId);
            }
        }
    }
    requestPeeringConnection(peer, connectionId) {
        if (this.cidrBlock === peer.cidrBlock) {
            throw new Error('Cannot peer two vpcs with the same cidr block!');
        }
        const peerPairId = `vpc-peering-connection-${connectionId}`;
        const peeringConnectionRequest = new ec2.CfnVPCPeeringConnection(this, (0, iac_utils_1.constructId)(peerPairId), {
            peerVpcId: peer.vpc.vpcId,
            vpcId: this.vpc.vpcId
        });
        this.addPeeringRoutes(peeringConnectionRequest.ref, peer.cidrBlock, connectionId);
        new vpc_peer_dns_resolution_1.VpcPeerDnsResolution(this, (0, iac_utils_1.constructId)(`requester-dns-resolution-${connectionId}`), {
            peeringConnectionId: peeringConnectionRequest.ref,
            vpcArn: this.vpc.vpcArn,
            accountId: this.accountId,
            region: this.region,
            isRequester: true
        });
        return peeringConnectionRequest;
    }
    acceptPeeringConnection(requester, peeringConnectionId, connectionId) {
        this.addPeeringRoutes(peeringConnectionId, requester.cidrBlock, connectionId);
        new vpc_peer_dns_resolution_1.VpcPeerDnsResolution(this, (0, iac_utils_1.constructId)(`accepter-dns-resolution-${connectionId}`), {
            peeringConnectionId,
            vpcArn: this.vpc.vpcArn,
            accountId: this.accountId,
            region: this.region,
            isAccepter: true
        });
    }
    requestExternalPeeringConnection(peer, connectionId) {
        if (this.cidrBlock === peer.cidrBlock) {
            throw new Error('Cannot peer two vpcs with the same cidr block!');
        }
        const peerPairId = `vpc-peering-connection-${connectionId}`;
        const peeringConnectionRequest = new ec2.CfnVPCPeeringConnection(this, (0, iac_utils_1.constructId)(peerPairId), {
            peerVpcId: peer.vpcId,
            vpcId: this.vpc.vpcId
        });
        this.addPeeringRoutes(peeringConnectionRequest.ref, peer.cidrBlock, connectionId);
        new vpc_peer_dns_resolution_1.VpcPeerDnsResolution(this, (0, iac_utils_1.constructId)(`requester-dns-resolution-${connectionId}`), {
            peeringConnectionId: peeringConnectionRequest.ref,
            vpcArn: this.vpc.vpcArn,
            accountId: this.accountId,
            region: this.region,
            isRequester: true
        });
        return peeringConnectionRequest;
    }
    acceptExternalPeeringConnection(peer, peeringConnectionId, connectionId) {
        const { accountId = this.accountId, region = this.region, vpcId } = peer;
        const externalVpcArn = `arn:aws:ec2:${region}:${accountId}:vpc/${vpcId}`;
        new vpc_peering_request_accepter_1.VpcPeeringRequestAccepter(this, (0, iac_utils_1.constructId)('PeeringRequestAccepter', connectionId), {
            vpcArn: externalVpcArn,
            peeringConnectionId,
            accountId,
            region
        });
        new vpc_peering_routes_1.VpcPeeringRoutes(this, (0, iac_utils_1.constructId)('ExternalVpcPeeringRoutes', connectionId), {
            vpcId: peer.vpcId,
            peeringConnectionId,
            destinationCidrBlock: this.cidrBlock,
            accountId,
            region,
            uniqueId: (0, crypto_1.randomUUID)()
        });
        new vpc_peer_dns_resolution_1.VpcPeerDnsResolution(this, (0, iac_utils_1.constructId)(`accepter-dns-resolution-${connectionId}`), {
            peeringConnectionId,
            vpcArn: externalVpcArn,
            accountId,
            region,
            isAccepter: true
        });
    }
    addPeeringRoutes(peeringConnectionId, destinationCidrBlock, connectionId) {
        this.vpc.publicSubnets.forEach((ps, index) => {
            const { routeTable } = ps;
            new ec2.CfnRoute(this, (0, iac_utils_1.constructId)(`PublicPeeringRoute${index}-${connectionId}`), {
                routeTableId: routeTable.routeTableId,
                destinationCidrBlock,
                vpcPeeringConnectionId: peeringConnectionId
            });
        });
        if (this.internetAccess) {
            this.vpc.privateSubnets.forEach((ps, index) => {
                const { routeTable } = ps;
                new ec2.CfnRoute(this, (0, iac_utils_1.constructId)(`PrivatePeeringRoute${index}-${connectionId}`), {
                    routeTableId: routeTable.routeTableId,
                    destinationCidrBlock,
                    vpcPeeringConnectionId: peeringConnectionId
                });
            });
        }
        this.vpc.isolatedSubnets.forEach((ps, index) => {
            const { routeTable } = ps;
            new ec2.CfnRoute(this, (0, iac_utils_1.constructId)(`IsolatedPeeringRoute${index}-${connectionId}`), {
                routeTableId: routeTable.routeTableId,
                destinationCidrBlock,
                vpcPeeringConnectionId: peeringConnectionId
            });
        });
    }
    get vpc() {
        return this._vpc;
    }
    get cidrBlock() {
        return this._cidrBlock;
    }
}
exports.VPC = VPC;
//# sourceMappingURL=data:application/json;base64,