"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rds = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
const rds = __importStar(require("aws-cdk-lib/aws-rds"));
const constructs_1 = require("constructs");
const iac_utils_1 = require("@tinystacks/iac-utils");
class Rds extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { databasePort = 5432, databaseEngine = rds.DatabaseInstanceEngine.POSTGRES, databaseName = 'tstesting', databaseUsername = 'postgres' } = props;
        this._databaseName = databaseName;
        this._databaseUsername = databaseUsername;
        if (!props.isImported || !props.dbArn) {
            this.RdsInstance = new rds.DatabaseInstance(this, (0, iac_utils_1.constructId)('rds', 'instance'), {
                engine: databaseEngine,
                vpc: props.vpc,
                vpcSubnets: {
                    subnetType: props.subnetType
                },
                instanceType: props.instanceType,
                allocatedStorage: props.storageSize || 20,
                maxAllocatedStorage: (props.storageSize || 20) * 2,
                allowMajorVersionUpgrade: true,
                instanceIdentifier: props.instanceIdentifier,
                databaseName: this._databaseName,
                port: databasePort,
                securityGroups: props.securityGroupsList
            });
            new cdk.CfnOutput(this, 'db-secret', {
                value: `${props.instanceIdentifier}-db-secret:${this.RdsInstance.secret?.secretArn}`
            });
            new cdk.CfnOutput(this, 'db-endpoint-port', {
                value: `${this.RdsInstance.dbInstanceEndpointAddress}:${this.RdsInstance.dbInstanceEndpointPort}`
            });
            new cdk.CfnOutput(this, 'db-name', {
                value: `${this._databaseName}`
            });
            const dbSecretArnOutputId = Rds.OutputDescriptions.secretArn(props.instanceIdentifier);
            new cdk.CfnOutput(this, dbSecretArnOutputId, {
                description: dbSecretArnOutputId,
                value: this.RdsInstance.secret?.secretArn || ''
            });
        }
        else {
            const identifier = props.dbArn.split('db:')[1];
            this.RdsInstance = rds.DatabaseInstance.fromDatabaseInstanceAttributes(this, (0, iac_utils_1.constructId)('postgres'), {
                instanceIdentifier: identifier,
                instanceEndpointAddress: '',
                securityGroups: props.securityGroupsList,
                port: databasePort
            });
        }
    }
    get dbSecret() {
        return this.RdsInstance.secret;
    }
    get db() {
        return this.RdsInstance;
    }
    get dbName() {
        return this._databaseName;
    }
    get dbUsername() {
        return this._databaseUsername;
    }
}
exports.Rds = Rds;
Rds.OutputDescriptions = {
    secretArn(instanceIdentifier) {
        return `${instanceIdentifier}-secret-arn`;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnN0cnVjdHMvZGIvcmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaURBQW1DO0FBRW5DLHlEQUEyQztBQUMzQywyQ0FBdUM7QUFDdkMscURBQW9EO0FBaUJwRCxNQUFhLEdBQUksU0FBUSxzQkFBUztJQU1oQyxZQUFhLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWU7UUFDeEQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLEVBQ0osWUFBWSxHQUFHLElBQUksRUFDbkIsY0FBYyxHQUFHLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQ3BELFlBQVksR0FBRyxXQUFXLEVBQzFCLGdCQUFnQixHQUFHLFVBQVUsRUFDOUIsR0FBRyxLQUFLLENBQUM7UUFFVixJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNsQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7UUFFMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBRXBDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUEsdUJBQVcsRUFBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7Z0JBQ2hGLE1BQU0sRUFBRSxjQUFjO2dCQUN0QixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtpQkFDN0I7Z0JBQ0QsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO2dCQUNoQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVyxJQUFJLEVBQUU7Z0JBQ3pDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO2dCQUNsRCx3QkFBd0IsRUFBRSxJQUFJO2dCQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO2dCQUU1QyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWE7Z0JBQ2hDLElBQUksRUFBRSxZQUFZO2dCQUNsQixjQUFjLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjthQUN6QyxDQUFDLENBQUM7WUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtnQkFDbkMsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixjQUFjLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRTthQUNyRixDQUFDLENBQUM7WUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO2dCQUMxQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLHlCQUF5QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUU7YUFDbEcsQ0FBQyxDQUFDO1lBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQ2pDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUU7YUFDL0IsQ0FBQyxDQUFDO1lBRUgsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZGLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7Z0JBQzNDLFdBQVcsRUFBRSxtQkFBbUI7Z0JBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRTthQUNoRCxDQUFDLENBQUM7U0FFSjthQUFNO1lBRUwsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUMsSUFBSSxFQUFFLElBQUEsdUJBQVcsRUFBQyxVQUFVLENBQUMsRUFBRTtnQkFDcEcsa0JBQWtCLEVBQUUsVUFBVTtnQkFDOUIsdUJBQXVCLEVBQUUsRUFBRTtnQkFDM0IsY0FBYyxFQUFFLEtBQUssQ0FBQyxrQkFBa0I7Z0JBQ3hDLElBQUksRUFBRSxZQUFZO2FBQ25CLENBQXlCLENBQUM7U0FFNUI7SUFFSCxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVELElBQVcsRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQzs7QUFwRkgsa0JBOEZDO0FBUlEsc0JBQWtCLEdBRXJCO0lBQ0EsU0FBUyxDQUFFLGtCQUEwQjtRQUNuQyxPQUFPLEdBQUcsa0JBQWtCLGFBQWEsQ0FBQztJQUM1QyxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyByZHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXJkcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IGNvbnN0cnVjdElkIH0gZnJvbSAnQHRpbnlzdGFja3MvaWFjLXV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZHNQcm9wcyB7XG4gIHZwYzogZWMyLklWcGM7XG4gIHNlY3VyaXR5R3JvdXBzTGlzdDogZWMyLklTZWN1cml0eUdyb3VwW107XG4gIGluc3RhbmNlVHlwZTogZWMyLkluc3RhbmNlVHlwZTtcbiAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGU7XG4gIGRhdGFiYXNlTmFtZT86IHN0cmluZztcbiAgZGF0YWJhc2VVc2VybmFtZT86IHN0cmluZztcbiAgZGF0YWJhc2VFbmdpbmU/OiBhbnk7XG4gIGRhdGFiYXNlUG9ydD86IG51bWJlcjtcbiAgaW5zdGFuY2VJZGVudGlmaWVyOiBzdHJpbmc7XG4gIHN0b3JhZ2VTaXplPzogbnVtYmVyO1xuICBkYkFybj86IHN0cmluZztcbiAgaXNJbXBvcnRlZD86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBjbGFzcyBSZHMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXG4gIHJlYWRvbmx5IFJkc0luc3RhbmNlOiByZHMuRGF0YWJhc2VJbnN0YW5jZTtcbiAgcmVhZG9ubHkgX2RhdGFiYXNlTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBfZGF0YWJhc2VVc2VybmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yIChzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUmRzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qge1xuICAgICAgZGF0YWJhc2VQb3J0ID0gNTQzMixcbiAgICAgIGRhdGFiYXNlRW5naW5lID0gcmRzLkRhdGFiYXNlSW5zdGFuY2VFbmdpbmUuUE9TVEdSRVMsXG4gICAgICBkYXRhYmFzZU5hbWUgPSAndHN0ZXN0aW5nJyxcbiAgICAgIGRhdGFiYXNlVXNlcm5hbWUgPSAncG9zdGdyZXMnXG4gICAgfSA9IHByb3BzO1xuXG4gICAgdGhpcy5fZGF0YWJhc2VOYW1lID0gZGF0YWJhc2VOYW1lO1xuICAgIHRoaXMuX2RhdGFiYXNlVXNlcm5hbWUgPSBkYXRhYmFzZVVzZXJuYW1lO1xuXG4gICAgaWYgKCFwcm9wcy5pc0ltcG9ydGVkfHwgIXByb3BzLmRiQXJuKSB7XG5cbiAgICAgIHRoaXMuUmRzSW5zdGFuY2UgPSBuZXcgcmRzLkRhdGFiYXNlSW5zdGFuY2UodGhpcywgY29uc3RydWN0SWQoJ3JkcycsICdpbnN0YW5jZScpLCB7XG4gICAgICAgIGVuZ2luZTogZGF0YWJhc2VFbmdpbmUsXG4gICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICB2cGNTdWJuZXRzOiB7XG4gICAgICAgICAgc3VibmV0VHlwZTogcHJvcHMuc3VibmV0VHlwZVxuICAgICAgICB9LFxuICAgICAgICBpbnN0YW5jZVR5cGU6IHByb3BzLmluc3RhbmNlVHlwZSxcbiAgICAgICAgYWxsb2NhdGVkU3RvcmFnZTogcHJvcHMuc3RvcmFnZVNpemUgfHwgMjAsXG4gICAgICAgIG1heEFsbG9jYXRlZFN0b3JhZ2U6IChwcm9wcy5zdG9yYWdlU2l6ZSB8fCAyMCkgKiAyLFxuICAgICAgICBhbGxvd01ham9yVmVyc2lvblVwZ3JhZGU6IHRydWUsXG4gICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogcHJvcHMuaW5zdGFuY2VJZGVudGlmaWVyLFxuXG4gICAgICAgIGRhdGFiYXNlTmFtZTogdGhpcy5fZGF0YWJhc2VOYW1lLFxuICAgICAgICBwb3J0OiBkYXRhYmFzZVBvcnQsXG4gICAgICAgIHNlY3VyaXR5R3JvdXBzOiBwcm9wcy5zZWN1cml0eUdyb3Vwc0xpc3RcbiAgICAgIH0pO1xuXG4gICAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnZGItc2VjcmV0Jywge1xuICAgICAgICB2YWx1ZTogYCR7cHJvcHMuaW5zdGFuY2VJZGVudGlmaWVyfS1kYi1zZWNyZXQ6JHt0aGlzLlJkc0luc3RhbmNlLnNlY3JldD8uc2VjcmV0QXJufWBcbiAgICAgIH0pO1xuXG4gICAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnZGItZW5kcG9pbnQtcG9ydCcsIHtcbiAgICAgICAgdmFsdWU6IGAke3RoaXMuUmRzSW5zdGFuY2UuZGJJbnN0YW5jZUVuZHBvaW50QWRkcmVzc306JHt0aGlzLlJkc0luc3RhbmNlLmRiSW5zdGFuY2VFbmRwb2ludFBvcnR9YFxuICAgICAgfSk7XG5cbiAgICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdkYi1uYW1lJywge1xuICAgICAgICB2YWx1ZTogYCR7dGhpcy5fZGF0YWJhc2VOYW1lfWBcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBkYlNlY3JldEFybk91dHB1dElkID0gUmRzLk91dHB1dERlc2NyaXB0aW9ucy5zZWNyZXRBcm4ocHJvcHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcbiAgICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsIGRiU2VjcmV0QXJuT3V0cHV0SWQsIHtcbiAgICAgICAgZGVzY3JpcHRpb246IGRiU2VjcmV0QXJuT3V0cHV0SWQsXG4gICAgICAgIHZhbHVlOiB0aGlzLlJkc0luc3RhbmNlLnNlY3JldD8uc2VjcmV0QXJuIHx8ICcnXG4gICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBwcm9wcy5kYkFybi5zcGxpdCgnZGI6JylbMV07XG4gICAgICB0aGlzLlJkc0luc3RhbmNlID0gcmRzLkRhdGFiYXNlSW5zdGFuY2UuZnJvbURhdGFiYXNlSW5zdGFuY2VBdHRyaWJ1dGVzKHRoaXMsIGNvbnN0cnVjdElkKCdwb3N0Z3JlcycpLCB7XG4gICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgaW5zdGFuY2VFbmRwb2ludEFkZHJlc3M6ICcnLFxuICAgICAgICBzZWN1cml0eUdyb3VwczogcHJvcHMuc2VjdXJpdHlHcm91cHNMaXN0LFxuICAgICAgICBwb3J0OiBkYXRhYmFzZVBvcnRcbiAgICAgIH0pIGFzIHJkcy5EYXRhYmFzZUluc3RhbmNlO1xuXG4gICAgfVxuICBcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGJTZWNyZXQgKCkge1xuICAgIHJldHVybiB0aGlzLlJkc0luc3RhbmNlLnNlY3JldDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGIgKCk6IHJkcy5EYXRhYmFzZUluc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy5SZHNJbnN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGJOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YWJhc2VOYW1lO1xuICB9XG5cbiAgcHVibGljIGdldCBkYlVzZXJuYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YWJhc2VVc2VybmFtZTtcbiAgfVxuXG4gIHN0YXRpYyBPdXRwdXREZXNjcmlwdGlvbnM6IHtcbiAgICBzZWNyZXRBcm46IChpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZykgPT4gc3RyaW5nXG4gIH0gPSB7XG4gICAgICBzZWNyZXRBcm4gKGluc3RhbmNlSWRlbnRpZmllcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke2luc3RhbmNlSWRlbnRpZmllcn0tc2VjcmV0LWFybmA7XG4gICAgICB9XG4gICAgfTtcblxufSJdfQ==