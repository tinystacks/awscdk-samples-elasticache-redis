"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const constructs_1 = require("constructs");
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const elasticache = __importStar(require("aws-cdk-lib/aws-elasticache"));
const secretsmanager = __importStar(require("aws-cdk-lib/aws-secretsmanager"));
class Redis extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { vpc, subnets, securityGroupsList, instanceType, dbIdentifier, primaryVpcCidrBlock } = props;
        this.vpc = vpc;
        this.id = id;
        this.securityGroupsList = securityGroupsList;
        this.primaryVpcCidrBlock = primaryVpcCidrBlock;
        this.dbIdentifier = dbIdentifier;
        this.instanceType = instanceType;
        this.subnets = subnets;
        this.initRedisCache();
    }
    initRedisCache() {
        const redisSecGroup = new ec2.SecurityGroup(this, this.id + 'redis-sg', {
            vpc: this.vpc
        });
        this.securityGroupsList.forEach((sg, index) => {
            redisSecGroup.addIngressRule(ec2.SecurityGroup.fromSecurityGroupId(this, `redis-cache-sg-${index}`, sg.securityGroupId), ec2.Port.tcp(6379));
        });
        if (this.primaryVpcCidrBlock !== undefined) {
            redisSecGroup.addIngressRule(ec2.Peer.ipv4(this.primaryVpcCidrBlock), ec2.Port.tcp(6379));
        }
        const cfnSubnetGroup = new elasticache.CfnSubnetGroup(this, 'redis-subnet-group', {
            subnetIds: this.subnets.map(sub => sub.subnetId),
            description: 'isolated subnet group'
        });
        this.elasticacheSecret = new secretsmanager.Secret(this, 'elasticache-secret', {
            generateSecretString: {
                includeSpace: false,
                excludeCharacters: '/"@%*()[]{}~|+?,\'\\_=`;:'
            }
        });
        this.replicationGroup = new elasticache.CfnReplicationGroup(this, 'redis-cluster', {
            replicationGroupId: this.dbIdentifier,
            replicationGroupDescription: 'redis cluster',
            atRestEncryptionEnabled: true,
            cacheNodeType: this.instanceType ?? 'cache.t4g.micro',
            engine: 'redis',
            transitEncryptionEnabled: true,
            // this is an unsafe unwrap of the secret value which may be exposed
            authToken: this.elasticacheSecret.secretValue.unsafeUnwrap(),
            multiAzEnabled: true,
            numNodeGroups: 1,
            replicasPerNodeGroup: 1,
            port: 6379,
            autoMinorVersionUpgrade: true,
            cacheSubnetGroupName: cfnSubnetGroup.ref,
            securityGroupIds: [redisSecGroup.securityGroupId]
        });
    }
    get redisEndpoint() {
        return this.replicationGroup.attrPrimaryEndPointAddress;
    }
    get redisPort() {
        return this.replicationGroup.attrPrimaryEndPointPort;
    }
    get redisAuthTokenSecretArn() {
        return this.elasticacheSecret.secretArn;
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,