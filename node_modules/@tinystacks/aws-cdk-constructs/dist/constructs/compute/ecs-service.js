"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsService = void 0;
const ecs = __importStar(require("aws-cdk-lib/aws-ecs"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const constructs_1 = require("constructs");
const iac_utils_1 = require("@tinystacks/iac-utils");
const lodash_1 = require("lodash");
class EcsService extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const ecsTaskRole = new iam.Role(this, (0, iac_utils_1.constructId)('ecs', 'TaskRole'), {
            assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
            description: 'Role that the api task definitions use'
        });
        if (!(0, lodash_1.isEmpty)(props.ecsIamPolicyStatements)) {
            ecsTaskRole.attachInlinePolicy(new iam.Policy(this, (0, iac_utils_1.constructId)('ecs', 'TaskPolicy'), {
                statements: props.ecsIamPolicyStatements
            }));
        }
        const ecsTaskDefinition = new ecs.TaskDefinition(this, (0, iac_utils_1.constructId)('ecs', 'TaskDefinition'), {
            family: 'task',
            compatibility: ecs.Compatibility.EC2_AND_FARGATE,
            cpu: String(props.cpu),
            memoryMiB: String(props.memoryLimitMiB),
            networkMode: ecs.NetworkMode.AWS_VPC,
            taskRole: ecsTaskRole
        });
        const ecsContainer = ecsTaskDefinition.addContainer((0, iac_utils_1.constructId)('ecs', 'Container'), {
            containerName: props.containerName,
            image: props.repositoryImage || ecs.RepositoryImage.fromRegistry(props.containerImage || ''),
            memoryLimitMiB: props.memoryLimitMiB,
            environment: props.ecsTaskEnvVars,
            logging: ecs.LogDriver.awsLogs({ streamPrefix: props.containerName }),
            command: props.command
        });
        ecsContainer.addPortMappings({ containerPort: props.applicationPort });
        this.ecsService = new ecs.FargateService(this, (0, iac_utils_1.constructId)('ecs', 'FargfateService'), {
            cluster: props.ecsCluster,
            desiredCount: props.desiredCount,
            taskDefinition: ecsTaskDefinition,
            securityGroups: [props.ecsSecurityGroup],
            assignPublicIp: true,
            enableExecuteCommand: true
        });
        if (props.albTargetGroup) {
            this.ecsService.attachToApplicationTargetGroup(props.albTargetGroup);
        }
    }
    service() {
        return this.ecsService;
    }
}
exports.EcsService = EcsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNzLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uc3RydWN0cy9jb21wdXRlL2Vjcy1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EseURBQTJDO0FBQzNDLHlEQUEyQztBQUUzQywyQ0FBdUM7QUFDdkMscURBQW9EO0FBQ3BELG1DQUFpQztBQW1CakMsTUFBYSxVQUFXLFNBQVEsc0JBQVM7SUFFdkMsWUFBYSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUMvRCxLQUFLLENBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxCLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBQSx1QkFBVyxFQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRTtZQUNyRSxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLENBQUM7WUFDOUQsV0FBVyxFQUFFLHdDQUF3QztTQUN0RCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBQSxnQkFBTyxFQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO1lBQzFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FDNUIsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFBLHVCQUFXLEVBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUFFO2dCQUNyRCxVQUFVLEVBQUUsS0FBSyxDQUFDLHNCQUFzQjthQUN6QyxDQUFDLENBQ0gsQ0FBQztTQUNIO1FBR0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUEsdUJBQVcsRUFBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtZQUMzRixNQUFNLEVBQUUsTUFBTTtZQUNkLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLGVBQWU7WUFDaEQsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3RCLFNBQVMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQztZQUN2QyxXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPO1lBQ3BDLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxJQUFBLHVCQUFXLEVBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQ25GLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxLQUFLLEVBQUUsS0FBSyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQztZQUM1RixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ2pDLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3ZCLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUEsdUJBQVcsRUFBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtZQUNwRixPQUFPLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDekIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGNBQWMsRUFBRSxpQkFBaUI7WUFDakMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQ3hDLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLG9CQUFvQixFQUFFLElBQUk7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztDQUVGO0FBekRELGdDQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVjcyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGVsYnYyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgY29uc3RydWN0SWQgfSBmcm9tICdAdGlueXN0YWNrcy9pYWMtdXRpbHMnO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWNzU2VydmljZVByb3BzIHtcbiAgY29udGFpbmVyTmFtZTogc3RyaW5nO1xuICB2cGM6IGVjMi5JVnBjO1xuICBlY3NDbHVzdGVyOiBlY3MuQ2x1c3RlcjtcbiAgY29udGFpbmVySW1hZ2U/OiBzdHJpbmc7XG4gIHJlcG9zaXRvcnlJbWFnZT86IGVjcy5Db250YWluZXJJbWFnZTtcbiAgbWVtb3J5TGltaXRNaUI6IG51bWJlcjtcbiAgY3B1OiBudW1iZXI7XG4gIGRlc2lyZWRDb3VudDogbnVtYmVyO1xuICBhcHBsaWNhdGlvblBvcnQ6IG51bWJlcjtcbiAgZWNzU2VjdXJpdHlHcm91cDogZWMyLlNlY3VyaXR5R3JvdXA7XG4gIGVjc0lhbVBvbGljeVN0YXRlbWVudHM6IGlhbS5Qb2xpY3lTdGF0ZW1lbnRbXTtcbiAgYWxiVGFyZ2V0R3JvdXA/OiBlbGJ2Mi5BcHBsaWNhdGlvblRhcmdldEdyb3VwO1xuICBlY3NUYXNrRW52VmFyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH07XG4gIGNvbW1hbmQ/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEVjc1NlcnZpY2UgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwcml2YXRlIGVjc1NlcnZpY2U6IGVjcy5GYXJnYXRlU2VydmljZTtcbiAgY29uc3RydWN0b3IgKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBFY3NTZXJ2aWNlUHJvcHMpIHtcbiAgICBzdXBlciAoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGVjc1Rhc2tSb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMsIGNvbnN0cnVjdElkKCdlY3MnLCAnVGFza1JvbGUnKSwge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2Vjcy10YXNrcy5hbWF6b25hd3MuY29tJyksXG4gICAgICBkZXNjcmlwdGlvbjogJ1JvbGUgdGhhdCB0aGUgYXBpIHRhc2sgZGVmaW5pdGlvbnMgdXNlJ1xuICAgIH0pO1xuXG4gICAgaWYgKCFpc0VtcHR5KHByb3BzLmVjc0lhbVBvbGljeVN0YXRlbWVudHMpKSB7XG4gICAgICBlY3NUYXNrUm9sZS5hdHRhY2hJbmxpbmVQb2xpY3koXG4gICAgICAgIG5ldyBpYW0uUG9saWN5KHRoaXMsIGNvbnN0cnVjdElkKCdlY3MnLCAnVGFza1BvbGljeScpLCB7XG4gICAgICAgICAgc3RhdGVtZW50czogcHJvcHMuZWNzSWFtUG9saWN5U3RhdGVtZW50c1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgXG5cbiAgICBjb25zdCBlY3NUYXNrRGVmaW5pdGlvbiA9IG5ldyBlY3MuVGFza0RlZmluaXRpb24odGhpcywgY29uc3RydWN0SWQoJ2VjcycsICdUYXNrRGVmaW5pdGlvbicpLCB7XG4gICAgICBmYW1pbHk6ICd0YXNrJyxcbiAgICAgIGNvbXBhdGliaWxpdHk6IGVjcy5Db21wYXRpYmlsaXR5LkVDMl9BTkRfRkFSR0FURSxcbiAgICAgIGNwdTogU3RyaW5nKHByb3BzLmNwdSksXG4gICAgICBtZW1vcnlNaUI6IFN0cmluZyhwcm9wcy5tZW1vcnlMaW1pdE1pQiksXG4gICAgICBuZXR3b3JrTW9kZTogZWNzLk5ldHdvcmtNb2RlLkFXU19WUEMsXG4gICAgICB0YXNrUm9sZTogZWNzVGFza1JvbGVcbiAgICB9KTtcblxuICAgIGNvbnN0IGVjc0NvbnRhaW5lciA9IGVjc1Rhc2tEZWZpbml0aW9uLmFkZENvbnRhaW5lcihjb25zdHJ1Y3RJZCgnZWNzJywgJ0NvbnRhaW5lcicpLCB7XG4gICAgICBjb250YWluZXJOYW1lOiBwcm9wcy5jb250YWluZXJOYW1lLFxuICAgICAgaW1hZ2U6IHByb3BzLnJlcG9zaXRvcnlJbWFnZSB8fCBlY3MuUmVwb3NpdG9yeUltYWdlLmZyb21SZWdpc3RyeShwcm9wcy5jb250YWluZXJJbWFnZSB8fCAnJyksXG4gICAgICBtZW1vcnlMaW1pdE1pQjogcHJvcHMubWVtb3J5TGltaXRNaUIsXG4gICAgICBlbnZpcm9ubWVudDogcHJvcHMuZWNzVGFza0VudlZhcnMsXG4gICAgICBsb2dnaW5nOiBlY3MuTG9nRHJpdmVyLmF3c0xvZ3MoeyBzdHJlYW1QcmVmaXg6IHByb3BzLmNvbnRhaW5lck5hbWUgfSksXG4gICAgICBjb21tYW5kOiBwcm9wcy5jb21tYW5kXG4gICAgfSk7XG5cbiAgICBlY3NDb250YWluZXIuYWRkUG9ydE1hcHBpbmdzKHsgY29udGFpbmVyUG9ydDogcHJvcHMuYXBwbGljYXRpb25Qb3J0IH0pO1xuXG4gICAgdGhpcy5lY3NTZXJ2aWNlID0gbmV3IGVjcy5GYXJnYXRlU2VydmljZSh0aGlzLCBjb25zdHJ1Y3RJZCgnZWNzJywgJ0ZhcmdmYXRlU2VydmljZScpLCB7XG4gICAgICBjbHVzdGVyOiBwcm9wcy5lY3NDbHVzdGVyLFxuICAgICAgZGVzaXJlZENvdW50OiBwcm9wcy5kZXNpcmVkQ291bnQsXG4gICAgICB0YXNrRGVmaW5pdGlvbjogZWNzVGFza0RlZmluaXRpb24sXG4gICAgICBzZWN1cml0eUdyb3VwczogW3Byb3BzLmVjc1NlY3VyaXR5R3JvdXBdLFxuICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICBlbmFibGVFeGVjdXRlQ29tbWFuZDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHByb3BzLmFsYlRhcmdldEdyb3VwKSB7XG4gICAgICB0aGlzLmVjc1NlcnZpY2UuYXR0YWNoVG9BcHBsaWNhdGlvblRhcmdldEdyb3VwKHByb3BzLmFsYlRhcmdldEdyb3VwKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2VydmljZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWNzU2VydmljZTtcbiAgfVxuXG59Il19