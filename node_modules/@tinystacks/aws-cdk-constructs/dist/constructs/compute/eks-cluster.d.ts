import { Construct } from 'constructs';
import * as eks from 'aws-cdk-lib/aws-eks';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import { InstanceType } from 'aws-cdk-lib/aws-ec2';
export interface EksProps {
    vpc: ec2.IVpc;
    internetAccess: boolean;
    defaultCapacity?: number;
    minimumCapacity?: number;
    maximumCapacity?: number;
    instanceType?: InstanceType;
    clusterName?: string;
}
export declare class EKS extends Construct {
    id: string;
    private readonly _vpc;
    private readonly _internetAccess;
    private readonly _defaultCapacity;
    private readonly _minimumCapacity;
    private readonly _maximumCapacity;
    private readonly _instanceType;
    private readonly _cluster;
    private readonly _mastersRole;
    private readonly _serviceAccount;
    private readonly _clusterName;
    private readonly _clusterNameSsmParamName;
    constructor(scope: Construct, id: string, props: EksProps);
    private createCluster;
    private configureLoadBalancerController;
    private createOutputs;
    private createTagParams;
    private tagSubnets;
    get cluster(): eks.Cluster;
    get mastersRole(): iam.Role;
    get vpc(): ec2.IVpc;
    get internetAccess(): boolean;
    get defaultCapacity(): number;
    get minimumCapacity(): number | undefined;
    get maximumCapacity(): number | undefined;
    get instanceType(): InstanceType;
    get serviceAccount(): eks.ServiceAccount;
    get clusterName(): string | undefined;
    get clusterNameParameterName(): string;
}
