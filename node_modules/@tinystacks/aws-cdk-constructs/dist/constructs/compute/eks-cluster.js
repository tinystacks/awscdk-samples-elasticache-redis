"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EKS = void 0;
const constructs_1 = require("constructs");
const eks = __importStar(require("aws-cdk-lib/aws-eks"));
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const cdk = __importStar(require("aws-cdk-lib"));
const ssm = __importStar(require("aws-cdk-lib/aws-ssm"));
const tagging_1 = require("../networking/tagging");
const iac_utils_1 = require("@tinystacks/iac-utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const eks_cleanup_1 = require("./eks-cleanup");
class EKS extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { vpc, internetAccess, defaultCapacity = 0, minimumCapacity, maximumCapacity, instanceType = new ec2.InstanceType('t3.micro'), clusterName = `c-${new Date().getTime()}` } = props;
        this.id = id;
        this._vpc = vpc;
        this._internetAccess = internetAccess;
        this._defaultCapacity = defaultCapacity;
        this._minimumCapacity = minimumCapacity;
        this._maximumCapacity = maximumCapacity;
        this._instanceType = instanceType;
        this._clusterName = clusterName;
        const { cluster, mastersRole } = this.createCluster();
        this._cluster = cluster;
        this._mastersRole = mastersRole;
        this.configureLoadBalancerController();
        const cleanup = new eks_cleanup_1.EksCleanup(this, (0, iac_utils_1.constructId)('EksCleanup'), {
            vpcId: this.vpc.vpcId,
            clusterName
        });
        this.cluster.node.addDependency(cleanup);
        this.tagSubnets();
        this.createOutputs();
        this._clusterNameSsmParamName = `${id}-clusterName`;
        //store clustername in ssm
        new ssm.StringParameter(this, `${id}-clusterName-ssm`, {
            parameterName: this._clusterNameSsmParamName,
            stringValue: this._cluster.clusterName
        });
    }
    createCluster() {
        let nodeSubnetType;
        if (this.internetAccess) {
            nodeSubnetType = ec2.SubnetType.PRIVATE_WITH_NAT;
        }
        else {
            nodeSubnetType = ec2.SubnetType.PUBLIC;
        }
        const mastersRole = new iam.Role(this, (0, iac_utils_1.constructId)('masters', 'role'), {
            assumedBy: new iam.AccountPrincipal(cdk.Stack.of(this).account)
        });
        const cluster = new eks.Cluster(this, (0, iac_utils_1.constructId)('eks', 'cluster'), {
            clusterName: this.clusterName,
            version: eks.KubernetesVersion.V1_21,
            vpc: this.vpc,
            defaultCapacity: 0,
            mastersRole
        });
        mastersRole.attachInlinePolicy(new iam.Policy(this, (0, iac_utils_1.constructId)('kubectl', 'policy'), {
            statements: [
                new iam.PolicyStatement({
                    actions: ['kubectl:*'],
                    resources: [cluster.clusterArn]
                })
            ]
        }));
        cluster.addAutoScalingGroupCapacity((0, iac_utils_1.constructId)('eks', 'asg', 'capacity'), {
            instanceType: this.instanceType,
            minCapacity: this.minimumCapacity,
            maxCapacity: this.maximumCapacity,
            vpcSubnets: {
                subnetType: nodeSubnetType
            }
        });
        return { cluster, mastersRole };
    }
    configureLoadBalancerController() {
        new eks.AlbController(this, 'AlbController', {
            cluster: this._cluster,
            version: eks.AlbControllerVersion.V2_4_1
        });
    }
    createOutputs() {
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'name'), {
            description: `${this.id}-cluster-name`,
            value: this.cluster.clusterName
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'arn'), {
            description: `${this.id}-cluster-arn`,
            value: this.cluster.clusterArn
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'role', 'name'), {
            description: `${this.id}-cluster-role-name`,
            value: this.cluster.role.roleName
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'role', 'arn'), {
            description: `${this.id}-cluster-role-arn`,
            value: this.cluster.role.roleArn
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'admin', 'role', 'name'), {
            description: `${this.id}-cluster-admin-role-name`,
            value: this.cluster.adminRole.roleName
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'admin', 'role', 'arn'), {
            description: `${this.id}-cluster-admin-role-arn`,
            value: this.cluster.adminRole.roleArn
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'kubectl', 'role', 'name'), {
            description: `${this.id}-cluster-kubectl-role-name`,
            value: this.cluster.kubectlRole?.roleName || ''
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'kubectl', 'role', 'arn'), {
            description: `${this.id}-cluster-kubectl-role-arn`,
            value: this.cluster.kubectlRole?.roleArn || ''
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'masters', 'role', 'name'), {
            description: `${this.id}-cluster-masters-role-name`,
            value: this.mastersRole.roleName
        });
        new aws_cdk_lib_1.CfnOutput(this, (0, iac_utils_1.constructId)('cluster', 'masters', 'role', 'arn'), {
            description: `${this.id}-cluster-masters-role-arn`,
            value: this.mastersRole.roleArn
        });
        // new CfnOutput(this, constructId('eks', 'cluster', 'service', 'account', 'role', 'name'), {
        //   description: `${this.id}-eks-cluster-service-account-role-name`,
        //   value: this.serviceAccount.role.roleName
        // });
        // new CfnOutput(this, constructId('eks', 'cluster', 'service', 'account', 'role', 'arn'), {
        //   description: `${this.id}-eks-cluster-service-account-role-arn`,
        //   value: this.serviceAccount.role.roleArn
        // });
    }
    createTagParams(resources, key, value) {
        const params = {
            Resources: resources,
            Tags: [
                {
                    Key: key,
                    Value: value
                }
            ]
        };
        return params;
    }
    tagSubnets() {
        const publicSubnets = [];
        const privateSubnets = [];
        for (const subnet of this._vpc.publicSubnets) {
            publicSubnets.push(subnet.subnetId);
        }
        for (const subnet of this._vpc.privateSubnets) {
            privateSubnets.push(subnet.subnetId);
        }
        const publicTagRequestParams = this.createTagParams(publicSubnets, 'kubernetes.io/role/elb', '1');
        const privateTagRequestParams = this.createTagParams(publicSubnets, 'kubernetes.io/role/internal-elb', '1');
        new tagging_1.SubnetTagging(this, 'tagPublicSubnets', { ec2ResourceTagsRequest: publicTagRequestParams });
        new tagging_1.SubnetTagging(this, 'tagPrivateSubnets', { ec2ResourceTagsRequest: privateTagRequestParams });
    }
    get cluster() {
        return this._cluster;
    }
    get mastersRole() {
        return this._mastersRole;
    }
    get vpc() {
        return this._vpc;
    }
    get internetAccess() {
        return this._internetAccess;
    }
    get defaultCapacity() {
        return this._defaultCapacity;
    }
    get minimumCapacity() {
        return this._minimumCapacity;
    }
    get maximumCapacity() {
        return this._maximumCapacity;
    }
    get instanceType() {
        return this._instanceType;
    }
    get serviceAccount() {
        return this._serviceAccount;
    }
    get clusterName() {
        return this._clusterName;
    }
    get clusterNameParameterName() {
        return this._clusterNameSsmParamName;
    }
}
exports.EKS = EKS;
//# sourceMappingURL=data:application/json;base64,