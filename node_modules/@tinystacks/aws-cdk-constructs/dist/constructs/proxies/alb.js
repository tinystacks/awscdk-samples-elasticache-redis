"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alb = void 0;
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const cdk = __importStar(require("aws-cdk-lib"));
const elbv2 = __importStar(require("aws-cdk-lib/aws-elasticloadbalancingv2"));
const constructs_1 = require("constructs");
const iac_utils_1 = require("@tinystacks/iac-utils");
const securitygroups_1 = require("../networking/securitygroups");
class Alb extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const albSecurityGroupRules = [
            { name: 'Internet to ALB', port: ec2.Port.tcp(80), peer: ec2.Peer.anyIpv4() }
        ];
        const { albSecurityGroup = new securitygroups_1.SecurityGroups(this, (0, iac_utils_1.constructId)('alb', 'SecurityGroup'), {
            vpc: props.vpc,
            securityGroupName: 'albSecurityGroup',
            securityGroupRulesList: albSecurityGroupRules
        }).securityGroup } = props;
        this.alb = new elbv2.ApplicationLoadBalancer(this, (0, iac_utils_1.constructId)('alb'), {
            vpc: props.vpc,
            vpcSubnets: { subnets: props.vpc.publicSubnets },
            internetFacing: true
        });
        this.alb.addSecurityGroup(albSecurityGroup);
        this._albTargetGroup = new elbv2.ApplicationTargetGroup(this, (0, iac_utils_1.constructId)('alb', 'TargetGroup'), {
            port: props.applicationPort,
            vpc: props.vpc,
            protocol: elbv2.ApplicationProtocol.HTTP,
            targetType: elbv2.TargetType.IP
        });
        this._albTargetGroup.configureHealthCheck({
            path: props.healthCheckPath,
            protocol: elbv2.Protocol.HTTP
        });
        const albListener = this.alb.addListener((0, iac_utils_1.constructId)('alb', 'Listener'), {
            open: true,
            port: 80
        });
        albListener.addTargetGroups((0, iac_utils_1.constructId)('alb', 'Listener', 'TargetGroup'), {
            targetGroups: [this._albTargetGroup]
        });
        new cdk.CfnOutput(this, (0, iac_utils_1.constructId)('alb', 'DnsName'), {
            value: this.alb.loadBalancerDnsName
        });
    }
    get albTargetGroup() {
        return this._albTargetGroup;
    }
    getAlb() {
        return this.alb;
    }
}
exports.Alb = Alb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnN0cnVjdHMvcHJveGllcy9hbGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5REFBMkM7QUFDM0MsaURBQW1DO0FBQ25DLDhFQUFnRTtBQUNoRSwyQ0FBdUM7QUFDdkMscURBQW9EO0FBQ3BELGlFQUE4RDtBQVM5RCxNQUFhLEdBQUksU0FBUSxzQkFBUztJQU1oQyxZQUFhLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWU7UUFDeEQsS0FBSyxDQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixNQUFNLHFCQUFxQixHQUFHO1lBQzVCLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtTQUM5RSxDQUFDO1FBRUYsTUFBTSxFQUNKLGdCQUFnQixHQUFHLElBQUksK0JBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBQSx1QkFBVyxFQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFBRTtZQUMvRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxpQkFBaUIsRUFBRSxrQkFBa0I7WUFDckMsc0JBQXNCLEVBQUUscUJBQXFCO1NBQzlDLENBQUMsQ0FBQyxhQUFhLEVBQ2pCLEdBQUcsS0FBSyxDQUFDO1FBRVYsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FDMUMsSUFBSSxFQUNKLElBQUEsdUJBQVcsRUFBQyxLQUFLLENBQUMsRUFDbEI7WUFDRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUU7WUFDaEQsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQ3JELElBQUksRUFDSixJQUFBLHVCQUFXLEVBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxFQUNqQztZQUNFLElBQUksRUFBRSxLQUFLLENBQUMsZUFBZTtZQUMzQixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxRQUFRLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixDQUFDLElBQUk7WUFDeEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtTQUNoQyxDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDO1lBQ3hDLElBQUksRUFBRSxLQUFLLENBQUMsZUFBZTtZQUMzQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1NBQzlCLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUEsdUJBQVcsRUFBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDdkUsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsRUFBRTtTQUNULENBQUMsQ0FBQztRQUVILFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBQSx1QkFBVyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLEVBQUU7WUFDekUsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUNyQyxDQUFDLENBQUM7UUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUEsdUJBQVcsRUFBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDckQsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1NBQ3BDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7Q0FFRjtBQXhFRCxrQkF3RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBjb25zdHJ1Y3RJZCB9IGZyb20gJ0B0aW55c3RhY2tzL2lhYy11dGlscyc7XG5pbXBvcnQgeyBTZWN1cml0eUdyb3VwcyB9IGZyb20gJy4uL25ldHdvcmtpbmcvc2VjdXJpdHlncm91cHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsYlByb3BzIHtcbiAgdnBjOiBlYzIuSVZwYztcbiAgYXBwbGljYXRpb25Qb3J0OiBudW1iZXI7XG4gIGhlYWx0aENoZWNrUGF0aDogc3RyaW5nO1xuICBhbGJTZWN1cml0eUdyb3VwPzogZWMyLklTZWN1cml0eUdyb3VwO1xufVxuXG5leHBvcnQgY2xhc3MgQWxiIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgXG4gIHJlYWRvbmx5IF9hbGJUYXJnZXRHcm91cDogZWxidjIuQXBwbGljYXRpb25UYXJnZXRHcm91cDtcbiAgcmVhZG9ubHkgYWxiU2VjdXJpdHlHcm91cDogZWMyLlNlY3VyaXR5R3JvdXA7XG4gIHByaXZhdGUgYWxiOiBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcjtcbiAgXG4gIGNvbnN0cnVjdG9yIChzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWxiUHJvcHMpIHtcbiAgICBzdXBlciAoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGFsYlNlY3VyaXR5R3JvdXBSdWxlcyA9IFtcbiAgICAgIHsgbmFtZTogJ0ludGVybmV0IHRvIEFMQicsIHBvcnQ6IGVjMi5Qb3J0LnRjcCg4MCksIHBlZXI6IGVjMi5QZWVyLmFueUlwdjQoKSB9XG4gICAgXTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGFsYlNlY3VyaXR5R3JvdXAgPSBuZXcgU2VjdXJpdHlHcm91cHModGhpcywgY29uc3RydWN0SWQoJ2FsYicsICdTZWN1cml0eUdyb3VwJyksIHtcbiAgICAgICAgdnBjOiBwcm9wcy52cGMsXG4gICAgICAgIHNlY3VyaXR5R3JvdXBOYW1lOiAnYWxiU2VjdXJpdHlHcm91cCcsXG4gICAgICAgIHNlY3VyaXR5R3JvdXBSdWxlc0xpc3Q6IGFsYlNlY3VyaXR5R3JvdXBSdWxlc1xuICAgICAgfSkuc2VjdXJpdHlHcm91cFxuICAgIH0gPSBwcm9wcztcblxuICAgIHRoaXMuYWxiID0gbmV3IGVsYnYyLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyKFxuICAgICAgdGhpcyxcbiAgICAgIGNvbnN0cnVjdElkKCdhbGInKSxcbiAgICAgIHtcbiAgICAgICAgdnBjOiBwcm9wcy52cGMsXG4gICAgICAgIHZwY1N1Ym5ldHM6IHsgc3VibmV0czogcHJvcHMudnBjLnB1YmxpY1N1Ym5ldHMgfSxcbiAgICAgICAgaW50ZXJuZXRGYWNpbmc6IHRydWVcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5hbGIuYWRkU2VjdXJpdHlHcm91cChhbGJTZWN1cml0eUdyb3VwKTtcblxuICAgIHRoaXMuX2FsYlRhcmdldEdyb3VwID0gbmV3IGVsYnYyLkFwcGxpY2F0aW9uVGFyZ2V0R3JvdXAoXG4gICAgICB0aGlzLFxuICAgICAgY29uc3RydWN0SWQoJ2FsYicsICdUYXJnZXRHcm91cCcpLFxuICAgICAge1xuICAgICAgICBwb3J0OiBwcm9wcy5hcHBsaWNhdGlvblBvcnQsXG4gICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICBwcm90b2NvbDogZWxidjIuQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQLFxuICAgICAgICB0YXJnZXRUeXBlOiBlbGJ2Mi5UYXJnZXRUeXBlLklQXG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuX2FsYlRhcmdldEdyb3VwLmNvbmZpZ3VyZUhlYWx0aENoZWNrKHtcbiAgICAgIHBhdGg6IHByb3BzLmhlYWx0aENoZWNrUGF0aCxcbiAgICAgIHByb3RvY29sOiBlbGJ2Mi5Qcm90b2NvbC5IVFRQXG4gICAgfSk7XG5cbiAgICBjb25zdCBhbGJMaXN0ZW5lciA9IHRoaXMuYWxiLmFkZExpc3RlbmVyKGNvbnN0cnVjdElkKCdhbGInLCAnTGlzdGVuZXInKSwge1xuICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgIHBvcnQ6IDgwXG4gICAgfSk7XG5cbiAgICBhbGJMaXN0ZW5lci5hZGRUYXJnZXRHcm91cHMoY29uc3RydWN0SWQoJ2FsYicsICdMaXN0ZW5lcicsICdUYXJnZXRHcm91cCcpLCB7XG4gICAgICB0YXJnZXRHcm91cHM6IFt0aGlzLl9hbGJUYXJnZXRHcm91cF1cbiAgICB9KTtcblxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsIGNvbnN0cnVjdElkKCdhbGInLCAnRG5zTmFtZScpLCB7XG4gICAgICB2YWx1ZTogdGhpcy5hbGIubG9hZEJhbGFuY2VyRG5zTmFtZVxuICAgIH0pO1xuICBcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWxiVGFyZ2V0R3JvdXAgKCk6IGVsYnYyLkFwcGxpY2F0aW9uVGFyZ2V0R3JvdXAge1xuICAgIHJldHVybiB0aGlzLl9hbGJUYXJnZXRHcm91cDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBbGIgKCk6IGVsYnYyLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyIHtcbiAgICByZXR1cm4gdGhpcy5hbGI7XG4gIH1cblxufSJdfQ==