"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateName = void 0;
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
const lodash_kebabcase_1 = __importDefault(require("lodash.kebabcase"));
const isEmpty = require("lodash.isempty");
const uniq = require("lodash.uniq");
const types_1 = require("./types");
const truncate_w_hash_1 = require("./truncate-w-hash");
const string_manipulation_1 = require("../string-manipulation");
function doNothing(input) {
    return input;
}
const casingFunctions = {
    [types_1.Casing.KEBAB]: lodash_kebabcase_1.default,
    [types_1.Casing.TITLE]: string_manipulation_1.titleCase,
    [types_1.Casing.SNAKE]: lodash_snakecase_1.default,
    [types_1.Casing.CAMEL]: lodash_camelcase_1.default,
    [types_1.Casing.CONSTANT]: string_manipulation_1.constantCase
};
function generateName(args) {
    const { identifiers, separator = '-', nameRestriction, casing } = args;
    const casingFunction = casingFunctions[casing] || doNothing;
    const name = casingFunction(uniq(identifiers).filter(id => !isEmpty(id)).join(separator));
    if (nameRestriction) {
        const { characterRestrictions, characterLimit } = nameRestriction;
        return (0, truncate_w_hash_1.truncateWithSemiHash)(name.replace(characterRestrictions, ''), characterLimit);
    }
    return name;
}
exports.generateName = generateName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtbmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYW1pbmcvZ2VuZXJhdGUtbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3RUFBeUM7QUFDekMsd0VBQXlDO0FBQ3pDLHdFQUF5QztBQUN6QywwQ0FBMkM7QUFDM0Msb0NBQXFDO0FBQ3JDLG1DQUFrRDtBQUNsRCx1REFBeUQ7QUFDekQsZ0VBQWlFO0FBRWpFLFNBQVMsU0FBUyxDQUFFLEtBQVU7SUFDNUIsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxlQUFlLEdBQUc7SUFDdEIsQ0FBQyxjQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsMEJBQVM7SUFDekIsQ0FBQyxjQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsK0JBQVM7SUFDekIsQ0FBQyxjQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsMEJBQVM7SUFDekIsQ0FBQyxjQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsMEJBQVM7SUFDekIsQ0FBQyxjQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsa0NBQVk7Q0FDaEMsQ0FBQztBQUVGLFNBQVMsWUFBWSxDQUFFLElBTXRCO0lBQ0MsTUFBTSxFQUNKLFdBQVcsRUFDWCxTQUFTLEdBQUcsR0FBRyxFQUNmLGVBQWUsRUFDZixNQUFNLEVBQ1AsR0FBRyxJQUFJLENBQUM7SUFDVCxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDO0lBQzVELE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUUxRixJQUFJLGVBQWUsRUFBRTtRQUNuQixNQUFNLEVBQ0oscUJBQXFCLEVBQ3JCLGNBQWMsRUFDZixHQUFHLGVBQWUsQ0FBQztRQUNwQixPQUFPLElBQUEsc0NBQW9CLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUN0RjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUdDLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdsb2Rhc2guY2FtZWxjYXNlJztcbmltcG9ydCBzbmFrZUNhc2UgZnJvbSAnbG9kYXNoLnNuYWtlY2FzZSc7XG5pbXBvcnQga2ViYWJDYXNlIGZyb20gJ2xvZGFzaC5rZWJhYmNhc2UnO1xuaW1wb3J0IGlzRW1wdHkgPSByZXF1aXJlKCdsb2Rhc2guaXNlbXB0eScpO1xuaW1wb3J0IHVuaXEgPSByZXF1aXJlKCdsb2Rhc2gudW5pcScpO1xuaW1wb3J0IHsgQ2FzaW5nLCBOYW1lUmVzdHJpY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHRydW5jYXRlV2l0aFNlbWlIYXNoIH0gZnJvbSAnLi90cnVuY2F0ZS13LWhhc2gnO1xuaW1wb3J0IHsgdGl0bGVDYXNlLCBjb25zdGFudENhc2UgfSBmcm9tICcuLi9zdHJpbmctbWFuaXB1bGF0aW9uJztcblxuZnVuY3Rpb24gZG9Ob3RoaW5nIChpbnB1dDogYW55KSB7XG4gIHJldHVybiBpbnB1dDtcbn1cblxuY29uc3QgY2FzaW5nRnVuY3Rpb25zID0ge1xuICBbQ2FzaW5nLktFQkFCXToga2ViYWJDYXNlLFxuICBbQ2FzaW5nLlRJVExFXTogdGl0bGVDYXNlLFxuICBbQ2FzaW5nLlNOQUtFXTogc25ha2VDYXNlLFxuICBbQ2FzaW5nLkNBTUVMXTogY2FtZWxDYXNlLFxuICBbQ2FzaW5nLkNPTlNUQU5UXTogY29uc3RhbnRDYXNlXG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU5hbWUgKGFyZ3M6IHtcbiAgaWRlbnRpZmllcnM6IHN0cmluZ1tdO1xuICBzZXBhcmF0b3I/OiBzdHJpbmc7XG4gIG5hbWVSZXN0cmljdGlvbj86IE5hbWVSZXN0cmljdGlvbjtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgY2FzaW5nPzogQ2FzaW5nXG59KTogc3RyaW5nIHtcbiAgY29uc3Qge1xuICAgIGlkZW50aWZpZXJzLFxuICAgIHNlcGFyYXRvciA9ICctJyxcbiAgICBuYW1lUmVzdHJpY3Rpb24sXG4gICAgY2FzaW5nXG4gIH0gPSBhcmdzO1xuICBjb25zdCBjYXNpbmdGdW5jdGlvbiA9IGNhc2luZ0Z1bmN0aW9uc1tjYXNpbmddIHx8IGRvTm90aGluZztcbiAgY29uc3QgbmFtZSA9IGNhc2luZ0Z1bmN0aW9uKHVuaXEoaWRlbnRpZmllcnMpLmZpbHRlcihpZCA9PiAhaXNFbXB0eShpZCkpLmpvaW4oc2VwYXJhdG9yKSk7XG5cbiAgaWYgKG5hbWVSZXN0cmljdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoYXJhY3RlclJlc3RyaWN0aW9ucyxcbiAgICAgIGNoYXJhY3RlckxpbWl0XG4gICAgfSA9IG5hbWVSZXN0cmljdGlvbjtcbiAgICByZXR1cm4gdHJ1bmNhdGVXaXRoU2VtaUhhc2gobmFtZS5yZXBsYWNlKGNoYXJhY3RlclJlc3RyaWN0aW9ucywgJycpLCBjaGFyYWN0ZXJMaW1pdCk7XG4gIH1cbiAgcmV0dXJuIG5hbWU7XG59XG5cbmV4cG9ydCB7XG4gIGdlbmVyYXRlTmFtZVxufTsiXX0=