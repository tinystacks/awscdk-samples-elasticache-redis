"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateName = void 0;
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
const isEmpty = require("lodash.isempty");
const uniq = require("lodash.uniq");
const types_1 = require("./types");
const truncate_w_hash_1 = require("./truncate-w-hash");
const string_manipulation_1 = require("../string-manipulation");
function doNothing(input) {
    return input;
}
const casingFunctions = {
    [types_1.Casing.KEBAB]: string_manipulation_1.kebabCase,
    [types_1.Casing.TITLE]: string_manipulation_1.titleCase,
    [types_1.Casing.SNAKE]: lodash_snakecase_1.default,
    [types_1.Casing.CAMEL]: lodash_camelcase_1.default,
    [types_1.Casing.CONSTANT]: string_manipulation_1.constantCase
};
function generateName(args) {
    const { identifiers, separator = '-', nameRestriction, casing } = args;
    const casingFunction = casingFunctions[casing] || doNothing;
    const name = casingFunction(uniq(identifiers).filter(id => !isEmpty(id)).join(separator));
    if (nameRestriction) {
        const { characterRestrictions, characterLimit } = nameRestriction;
        return (0, truncate_w_hash_1.truncateWithSemiHash)(name.replace(new RegExp(characterRestrictions, 'g'), ''), characterLimit);
    }
    return name;
}
exports.generateName = generateName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtbmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYW1pbmcvZ2VuZXJhdGUtbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3RUFBeUM7QUFDekMsd0VBQXlDO0FBQ3pDLDBDQUEyQztBQUMzQyxvQ0FBcUM7QUFDckMsbUNBQWtEO0FBQ2xELHVEQUF5RDtBQUN6RCxnRUFBNEU7QUFFNUUsU0FBUyxTQUFTLENBQUUsS0FBVTtJQUM1QixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLGVBQWUsR0FBRztJQUN0QixDQUFDLGNBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSwrQkFBUztJQUN6QixDQUFDLGNBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSwrQkFBUztJQUN6QixDQUFDLGNBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSwwQkFBUztJQUN6QixDQUFDLGNBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSwwQkFBUztJQUN6QixDQUFDLGNBQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxrQ0FBWTtDQUNoQyxDQUFDO0FBRUYsU0FBUyxZQUFZLENBQUUsSUFNdEI7SUFDQyxNQUFNLEVBQ0osV0FBVyxFQUNYLFNBQVMsR0FBRyxHQUFHLEVBQ2YsZUFBZSxFQUNmLE1BQU0sRUFDUCxHQUFHLElBQUksQ0FBQztJQUNULE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDNUQsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRTFGLElBQUksZUFBZSxFQUFFO1FBQ25CLE1BQU0sRUFDSixxQkFBcUIsRUFDckIsY0FBYyxFQUNmLEdBQUcsZUFBZSxDQUFDO1FBQ3BCLE9BQU8sSUFBQSxzQ0FBb0IsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0tBQ3ZHO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBR0Msb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2xvZGFzaC5jYW1lbGNhc2UnO1xuaW1wb3J0IHNuYWtlQ2FzZSBmcm9tICdsb2Rhc2guc25ha2VjYXNlJztcbmltcG9ydCBpc0VtcHR5ID0gcmVxdWlyZSgnbG9kYXNoLmlzZW1wdHknKTtcbmltcG9ydCB1bmlxID0gcmVxdWlyZSgnbG9kYXNoLnVuaXEnKTtcbmltcG9ydCB7IENhc2luZywgTmFtZVJlc3RyaWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyB0cnVuY2F0ZVdpdGhTZW1pSGFzaCB9IGZyb20gJy4vdHJ1bmNhdGUtdy1oYXNoJztcbmltcG9ydCB7IHRpdGxlQ2FzZSwgY29uc3RhbnRDYXNlLCBrZWJhYkNhc2UgfSBmcm9tICcuLi9zdHJpbmctbWFuaXB1bGF0aW9uJztcblxuZnVuY3Rpb24gZG9Ob3RoaW5nIChpbnB1dDogYW55KSB7XG4gIHJldHVybiBpbnB1dDtcbn1cblxuY29uc3QgY2FzaW5nRnVuY3Rpb25zID0ge1xuICBbQ2FzaW5nLktFQkFCXToga2ViYWJDYXNlLFxuICBbQ2FzaW5nLlRJVExFXTogdGl0bGVDYXNlLFxuICBbQ2FzaW5nLlNOQUtFXTogc25ha2VDYXNlLFxuICBbQ2FzaW5nLkNBTUVMXTogY2FtZWxDYXNlLFxuICBbQ2FzaW5nLkNPTlNUQU5UXTogY29uc3RhbnRDYXNlXG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU5hbWUgKGFyZ3M6IHtcbiAgaWRlbnRpZmllcnM6IHN0cmluZ1tdO1xuICBzZXBhcmF0b3I/OiBzdHJpbmc7XG4gIG5hbWVSZXN0cmljdGlvbj86IE5hbWVSZXN0cmljdGlvbjtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgY2FzaW5nPzogQ2FzaW5nXG59KTogc3RyaW5nIHtcbiAgY29uc3Qge1xuICAgIGlkZW50aWZpZXJzLFxuICAgIHNlcGFyYXRvciA9ICctJyxcbiAgICBuYW1lUmVzdHJpY3Rpb24sXG4gICAgY2FzaW5nXG4gIH0gPSBhcmdzO1xuICBjb25zdCBjYXNpbmdGdW5jdGlvbiA9IGNhc2luZ0Z1bmN0aW9uc1tjYXNpbmddIHx8IGRvTm90aGluZztcbiAgY29uc3QgbmFtZSA9IGNhc2luZ0Z1bmN0aW9uKHVuaXEoaWRlbnRpZmllcnMpLmZpbHRlcihpZCA9PiAhaXNFbXB0eShpZCkpLmpvaW4oc2VwYXJhdG9yKSk7XG5cbiAgaWYgKG5hbWVSZXN0cmljdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoYXJhY3RlclJlc3RyaWN0aW9ucyxcbiAgICAgIGNoYXJhY3RlckxpbWl0XG4gICAgfSA9IG5hbWVSZXN0cmljdGlvbjtcbiAgICByZXR1cm4gdHJ1bmNhdGVXaXRoU2VtaUhhc2gobmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoY2hhcmFjdGVyUmVzdHJpY3Rpb25zLCAnZycpLCAnJyksIGNoYXJhY3RlckxpbWl0KTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZXhwb3J0IHtcbiAgZ2VuZXJhdGVOYW1lXG59OyJdfQ==